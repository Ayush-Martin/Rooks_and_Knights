<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/head.ejs') %>
</head>

<body class="">

    <!-- Header -->
    <header>
        <%- include('./partials/header.ejs') %>
    </header>

    <div class="bg0 p-t-75 p-b-85">
        <div class="container">
            <div class="row">

                <div class="col-lg-10 col-xl-7 m-lr-auto m-b-50">
                    <div class="m-l-15 m-r--30 m-lr-0-xl">
                        <div class="wrap-table-shopping-cart">
                            <table class="table-shopping-cart">
                                <tr class="table_head">
                                    <th class="column-1">Product</th>
                                    <th class="column-2"></th>
                                    <th class="column-3">Price</th>
                                    <th class="column-4">Quantity</th>
                                    <th class="column-5">Total</th>
                                    <th></th>
                                </tr>

                                <% cart.cartItems.forEach((cartItem)=>{%>

                                    <tr class="table_row cart-product-row" id="cartItemRow_<%= cartItem._id %>"
                                        data-products="<%=JSON.stringify(cartItem)  %>">
                                        <td class="column-1">
                                            <a class="how-itemcart1 d-block"
                                                href="/shop/product/<%= cartItem.productID._id %>">
                                                <img src="<%= cartItem.productID.productImage1 %>" alt="IMG">
                                            </a>
                                        </td>
                                        <td class="column-2">
                                            <%= cartItem.productID.productName %>
                                        </td>
                                        <td class="column-3">
                                            <%= cartItem.productID.price %>
                                        </td>

                                        <td class="column-4 text-center ">
                                            <% if(!cartItem.productID.isListed){%>
                                                <p>Proudct unavaliable</p>
                                                <% } else if(cartItem.quantity<=cartItem.productID.stock) {%>

                                                    <p class="p-l-40">
                                                        <%= cartItem.quantity %>
                                                    </p>
                                                    <% }else{%>
                                                        <p>Out of stock</p>
                                                        <% } %>

                                        </td>
                                        <td class="column-5 cart-product-total" id="cartProductTotal_<%=cartItem._id%>">
                                            <%=cartItem.productID.price * cartItem.quantity%>
                                        </td>
                                        <td class="column-2">

                                            <button type="button" data-cartItem="<%= JSON.stringify(cartItem) %>"
                                                onclick="deleteProduct(this)"><i class="fa-solid fa-trash"></i></button>

                                        </td>
                                    </tr>
                                    <% }); %>
                            </table>
                        </div>
                        <div class="card shadow-sm p-3 mb-5 bg-white rounded bor2">
                            <div class="text-dark cl0 bor2 f-w-700 m-l-15">Shipping Address</div>
                            <div class="card-body">
                                <% address.address.forEach((addressItem)=>{ %>

                                    <div class="address-item m-b-15 d-flex justify-content-between">
                                        <div class="form-check">

                                            <input class="form-check-input" type="radio" name="shippingAddress"
                                                id="address_1" id="address_<%= addressItem._id %>"
                                                value="<%= addressItem._id %>"
                                                <%=addressItem._id===address.address[0]._id ? 'checked' : '' %>>
                                            <label for="address_1" class="form-check-label cl8">
                                                <%= addressItem.addressTitle %> : <%= addressItem.state %>,<%=
                                                            addressItem.city %>,<%= addressItem.pinCode %>,<%=
                                                                    addressItem.streetAddress %>
                                            </label>
                                        </div>
                                        <div>
                                            <button class="btn btn-dark btn-sm m-b-3"
                                                data-address-item="<%= JSON.stringify(addressItem)%>"
                                                onclick="editAddressModel(event,'<%=addressItem._id%>')"
                                                data-toggle="modal" data-target="#editAddressModel">
                                                <i class="fa fa-edit"></i>
                                            </button>

                                            <button class="btn btn-danger btn-sm  m-b-3"
                                                onclick="removeAddress(event,'<%=addressItem._id%>')"><i
                                                    class="fa fa-trash"></i></button>
                                        </div>

                                    </div>
                                    <% }) %>

                                        <button class="btn btn-primary" data-toggle="modal"
                                            data-target="#addAddressModel"><i class="fa fa-plus"></i> Add New
                                            Address</button>



                            </div>
                        </div>

                    </div>

                </div>




                <div class="col-sm-9 col-lg-7 col-xl-5 m-lr-auto m-b-50">
                    <div class="bor10 p-lr-10 p-t-30 p-b-30 m-l-40 m-r-30 m-lr-0-xl p-lr-10-sm">
                        <h4 class="mtext-109 cl2 p-b-10">
                            Payment
                            <hr>
                        </h4>

                        <!-- Sub Total -->
                        <div class="m-t-10">
                            <p class="cl2 mtext-101">Base Price: <span id="basePrice">
                                    <%= cart.totalPrice %>
                                </span></p>

                        </div>
                        <div class="m-t-10">
                            <p class="cl2 mtext-101">Offer: <span id="OfferAmount">
                                         <% let offer= cart.cartItems.reduce((acc,product)=>{ %>
                                            <%  return acc+parseInt((product.productID.price * Math.max(product.productID.offer,product.categoryID.offer,product.subCategoryID.offer) /100)*product.quantity) %>
                                        <%},0) %>
                                        <%= offer %>

                                </span></p>

                        </div>

                        <!-- Coupon Code -->
                        <div class="p-t-20 p-b-10">
                            <div class="size-208 w-full">
                                <span class="mtext-101">
                                    Coupon Code:
                                </span>
                            </div>
                            <div class="size-200 d-flex p-t-1">
                                <input type="text" id="couponCodeInput" class="form-control"
                                    placeholder="Enter your coupon code" style="float: left;">
                                <button class="btn btn-primary" id="applyCoupon" onclick="addCouponDiscount()">
                                    Apply
                                </button>
                            </div>
                        </div>

                        <div class="p-t-20 p-b-10">
                            <div class="size-208 w-full">
                                <span class="mtext-101">
                                    Applied Coupons
                                </span>
                            </div>
                            <div class="size-200  p-t-1 p-r-100">
                                <ul id="couponList">

                                </ul>
                            </div>
                        </div>

                        <div class="m-t-10">
                            <p class="cl2 mtext-101">Coupon Discount: <span id="couponDiscountAmount">
                                    0
                                </span></p>
                            <p class="cl2 mtext-101 m-t-5">Total Discount Amount:
                                <span id="discountAmount">
                                    <%= offer %>
                                </span>
                            </p>
                            <p class="cl2 mtext-101 m-t-5">Tax Amount:
                                <span id="taxAmount">
                                    <%= cart.totalPrice * 2 / 100 %>
                                </span>
                            </p>
                            <p class="cl2 mtext-101 m-t-5">Delivery Charge:
                                <span id="deliveryCharge">
                                    100
                                </span>
                            </p>

                            <p class="cl2 mtext-101 m-t-5">Total Amount:
                                <span id="totalAmount">
                                    <%= cart.totalPrice-offer+100 %>
                                </span>
                            </p>

                        </div>

                        <!-- Payment Method -->
                        <div class=" p-t-20 p-b-33">
                            <div class="size-208 w-full">
                                <span class="mtext-101 cl2">
                                    Payment Method:
                                </span>
                            </div>
                            <div class="size-209 p-t-1">
                                <select id="paymentMethod" class="form-control">
                                    <option value="COD">Cash On Delivery</option>
                                    <option value="Razorpay">Online Payment</option>
                                    <option value="Wallet">Wallet</option>

                                </select>
                            </div>
                        </div>

                        <button class="flex-c-m stext-101 cl0 size-116 bg3 bor14 hov-btn3 p-lr-15 trans-04 pointer"
                            id="proceedCheckout" onclick="proccedToPayment(event)">
                            Proceed to Payment
                        </button>
                    </div>
                </div>

            </div>
        </div>
    </div>


    <!-- modal to add new address -->
    <div class="modal fade m-t-50" id="addAddressModel" tabindex="-2" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">New Address</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="addressTitle" class="col-form-label">Address Title</label>
                            <input type="text" class="form-control" id="addressTitle">
                        </div>
                        <div class="form-group">
                            <label for="state" class="col-form-label">State</label>
                            <input type="text" class="form-control" id="state">
                        </div>
                        <div class="form-group">
                            <label for="city" class="col-form-label">City</label>
                            <input type="text" class="form-control" id="city">
                        </div>
                        <div class="form-group">
                            <label for="pinCode" class="col-form-label">Pin Code</label>
                            <input type="text" class="form-control" id="pinCode">
                        </div>
                        <div class="form-group">
                            <label for="streetAddress" class="col-form-label">Street Addrress</label>
                            <textarea class="form-control" id="streetAddress"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="addNewAddress(event)">Add</button>
                </div>
            </div>
        </div>
    </div>



    <!-- modal to edit address -->
    <div class="modal fade m-t-50" id="editAddressModel" tabindex="-2" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Edit Address</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="addressTitle" class="col-form-label">Address Title</label>
                            <input type="text" class="form-control" id="addressTitleEdit">
                        </div>
                        <div class="form-group">
                            <label for="state" class="col-form-label">State</label>
                            <input type="text" class="form-control" id="stateEdit">
                        </div>
                        <div class="form-group">
                            <label for="city" class="col-form-label">City</label>
                            <input type="text" class="form-control" id="cityEdit">
                        </div>
                        <div class="form-group">
                            <label for="pinCode" class="col-form-label">Pin Code</label>
                            <input type="text" class="form-control" id="pinCodeEdit">
                        </div>
                        <div class="form-group">
                            <label for="streetAddress" class="col-form-label">Street Addrress</label>
                            <textarea class="form-control" id="streetAddressEdit"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer" id="editAddressDiv">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>





    <!-- Footer -->
    <footer class="bg3 p-t-75 p-b-32">
        <%- include('./partials/footer.ejs') %>
    </footer>


    <%- include('./partials/backToTop.ejs') %>


        <%- include('./partials/scriptBody.ejs') %>
            <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
            <script>
                function addNewAddress(event) {
                    event.preventDefault()

                    let addressTitle = document.getElementById('addressTitle').value;
                    let state = document.getElementById('state').value;
                    let city = document.getElementById('city').value;
                    let pinCode = document.getElementById('pinCode').value;
                    let streetAddress = document.getElementById('streetAddress').value;

                    const error = ValidateAddress(addressTitle, state, city, pinCode, streetAddress);

                    if (error) {
                        Swal.fire({
                            icon: "error",
                            title: "Validation Error",
                            text: error,
                        });
                        return
                    }

                    fetch('/address/add', {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ addressTitle, state, city, pinCode, streetAddress })
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Added",
                                    text: "New Address Added",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            }
                            else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                }

                function editAddress(event, _id) {
                    event.preventDefault()

                    let addressTitle = document.getElementById('addressTitleEdit').value;
                    let state = document.getElementById('stateEdit').value;
                    let city = document.getElementById('cityEdit').value;
                    let pinCode = document.getElementById('pinCodeEdit').value;
                    let streetAddress = document.getElementById('streetAddressEdit').value;

                    const error = ValidateAddress(addressTitle, state, city, pinCode, streetAddress);

                    if (error) {
                        Swal.fire({
                            icon: "error",
                            title: "Validation Error",
                            text: error,
                        });
                        return
                    }

                    fetch(`/address/edit/${_id}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ addressTitle, state, city, pinCode, streetAddress })
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Edited",
                                    text: "Address has been edited",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            }
                            else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                }

                function removeAddress(event, ID) {

                    event.preventDefault()
                    Swal.fire({
                        title: "Are you sure?",
                        text: "You want to remove this address",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes"
                    }).then((result) => {
                        if (result.isConfirmed) {

                            fetch(`/address/delete/${ID}`, {
                                method: "DELETE",
                                headers: {
                                    'Content-Type': 'application/json',
                                }
                            })
                                .then((res) => res.json())
                                .then((data) => {
                                    if (data.success) {
                                        Swal.fire({
                                            title: "Deleted",
                                            text: "Address has been removed",
                                            icon: "success",
                                            timer: 2000
                                        });
                                        setTimeout(() => {
                                            window.location.reload();
                                        }, 2000)
                                    }
                                    else if (data.authError) {
                                        Swal.fire({
                                            icon: "error",
                                            title: "Oops...",
                                            text: data.authError,
                                            footer: data.errorRedirect
                                        });
                                    }
                                })
                        }
                    });
                }



                function editAddressModel(e, _id) {
                    const addressdata = e.target;
                    const { addressTitle, state, city, pinCode, streetAddress } = JSON.parse(addressdata.getAttribute('data-address-item'));
                    document.getElementById('addressTitleEdit').value = addressTitle;
                    document.getElementById('stateEdit').value = state;
                    document.getElementById('cityEdit').value = city;
                    document.getElementById('pinCodeEdit').value = pinCode;
                    document.getElementById('streetAddressEdit').value = streetAddress;

                    // Get the parent div where the button should be appended
                    const editAddressDiv = document.getElementById('editAddressDiv');

                    // Check if the edit button already exists
                    if (!document.getElementById('editAddressButton')) {
                        var editButton = document.createElement('button');
                        editButton.textContent = "Edit";
                        editButton.id = 'editAddressButton';
                        editButton.onclick = () => editAddress(event, _id);
                        editButton.classList.add('btn', 'btn-primary');

                        editAddressDiv.appendChild(editButton);
                    }
                }

                function deleteProduct(button) {
                    const cartItem = JSON.parse(button.getAttribute('data-cartItem'))


                    const row = document.getElementById(`cartItemRow_${cartItem._id}`)
                    const basePrice = document.getElementById('basePrice');
                    const OfferAmount = document.getElementById('OfferAmount');
                    const totalAmount = document.getElementById('totalAmount');
                    const couponDiscountAmount = document.getElementById('couponDiscountAmount');
                    const discountAmount = document.getElementById('discountAmount');

                    let offer = 0;


                    if (cartItem.productID.offer) {
                        offer = parseInt(cartItem.productID.offer * cartItem.productID.price * cartItem.quantity / 100)
                    } else if (cartItem.categoryID.offer) {
                        offer = parseInt(cartItem.categoryID.offer * cartItem.productID.price * cartItem.quantity / 100)
                    } else if (cartItem.subCategoryID.offer) {
                        offer = parseInt(cartItem.subcategoryID.offer * cartItem.productID.price * cartItem.quantity / 100)
                    }

                    basePrice.innerHTML = Number(basePrice.textContent) - Number(cartItem.productID.price * cartItem.quantity);
                    OfferAmount.innerText = Number(OfferAmount.textContent) - offer
                    totalAmount.innerText = Number(totalAmount.textContent) - ((cartItem.productID.price * cartItem.quantity) - offer)
                    discountAmount.innerText = Number(discountAmount.textContent) - offer - Number(couponDiscountAmount.textContent)


                    row.parentNode.removeChild(row);

                }

                function proccedToPayment(event) {

                    event.preventDefault()
                    const selectedAddress = document.querySelector('input[name="shippingAddress"]:checked');

                    if (!selectedAddress ) {
                        Swal.fire({
                            title: "Address not selected ",
                            icon: "error",
                        });
                        return
                    }

                    const addressId = selectedAddress.value;

                    const rows = document.querySelectorAll('.cart-product-row');
                    const products = []
                    const cartItemIds = []
                    let outOfStock = false;
                    let unavaliableProduct = false;

                    if (!rows.length) {
                        Swal.fire({
                            title: "No product to checkout ",
                            icon: "error",
                        });
                        return
                    }

                    rows.forEach((row) => {
                        const cartItem = JSON.parse(row.getAttribute('data-products'))

                        if (cartItem.quantity > cartItem.productID.stock) {
                            outOfStock = true
                            Swal.fire({
                                title: "Cannot Proceed to payment",
                                text: "Contanins out of stock",
                                icon: "error",
                            });
                        }

                        if (!cartItem.productID.isListed) {
                            unavaliableProduct = true
                            Swal.fire({
                                title: "Cannot Proceed to payment",
                                text: "Contanins unavaliable products",
                                icon: "error",
                            });
                        }
                        const price = cartItem.productID.price * cartItem.quantity;
                        let discount = 0;

                        if (cartItem.productID.offer) {

                            discount = (cartItem.productID.price * cartItem.productID.offer / 100) * cartItem.quantity

                        } else if (cartItem.categoryID.offer) {
                            discount = (cartItem.productID.price * cartItem.categoryID.offer / 100) * cartItem.quantity
                        } else if (cartItem.subCategoryID.offer) {
                            discount = (cartItem.productID.price * cartItem.subCategoryID.offer / 100) * cartItem.quantity
                        }

                        const couponDiscount = Number(document.getElementById('couponDiscountAmount').innerText)

                        discount += couponDiscount;

                        products.push({
                            productID: cartItem.productID,
                            quantity: cartItem.quantity,
                            price,
                            discount,
                            amountPaid: price - discount
                        })

                        cartItemIds.push(cartItem._id)
                    })

                    if (outOfStock || unavaliableProduct) {
                        return
                    }
                    const paymentMethod = document.getElementById('paymentMethod').value
                    const basePrice = document.getElementById('basePrice').textContent;
                    const totalAmmount = document.getElementById('totalAmount').textContent;
                    const discount = document.getElementById('discountAmount').textContent;
                    const taxAmmount = document.getElementById('taxAmount').textContent;

                    if (totalAmmount > 1000 && paymentMethod == 'COD') {
                        Swal.fire({
                            title: "Cannot Proceed to using Cash on delivery",
                            text: "For cash on delivery the amount should be less than 1000",
                            icon: "error",
                        });
                        return
                    }

                    fetch('/order/proceedToPayment', {
                        method: "POST",
                        headers: {
                            'Content-type': 'application/json'
                        },
                        body: JSON.stringify({ products, addressId, paymentMethod, basePrice, cartItemIds, totalAmmount, discount, taxAmmount })
                    }).then((res) => res.json())
                        .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Ordered",
                                    text: "Order Placed successfully",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.href = data.successRedirect;
                                }, 2000)
                            }

                            if (data.error) {
                                Swal.fire({
                                    title: "Error",
                                    text: data.error,
                                    icon: "error",
                                });
                            }

                            else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });

                                return
                            }

                            if (data.razorpayOrder) {
                                var options = {
                                    "key": "rzp_test_iPUiBGfQqstcsI", // Enter the Key ID generated from the Dashboard
                                    "name": "Rook & Knights",
                                    "description": "Test Transaction",
                                    "image": "https://imgs.search.brave.com/jsPXFiH4YxTvzVbUvQMILb4V32Y6I0DxlC2p3CaqAfA/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9ibG9n/LnBob3RvYWRraW5n/LmNvbS93cC1jb250/ZW50L3VwbG9hZHMv/MjAyMy8wNS8xNjgy/OTQ2NDIzMzgxLTEu/anBn",
                                    "order_id": data.razorpayOrder.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
                                    "callback_url": "/order/completePayment",
                                    "theme": {
                                        "color": "#454545"
                                    }
                                };
                                var rzp1 = new Razorpay(options);

                                rzp1.on('payment.failed', function (response) {
                                    // Handle payment failure and redirect
                                    console.error("Payment failed:", response.error);
                                    alert('payment Failed')
                                    window.location.href = '/'
                                });
                                rzp1.open();
                            }
                        })
                }


                function addCouponDiscount() {
                    const basePrice = document.getElementById('basePrice').textContent
                    const couponCode = document.getElementById('couponCodeInput').value
                    const totalAmount = document.getElementById('totalAmount');
                    const couponDiscountAmount = document.getElementById('couponDiscountAmount');
                    const discountAmount = document.getElementById('discountAmount');
                    const couponList = document.getElementById('couponList');

                    fetch(`/order/addCoupon`, {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ totalAmount:totalAmount.textContent, couponCode })
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            if (data.success) {
                                if(document.getElementById(`coupon_${data.couponID}`)) return ;


                                if (couponDiscountAmount.textContent > 0) {
                                    discountAmount.innerText = Number(discountAmount.textContent) - Number(couponDiscountAmount.textContent)
                                    totalAmount.innerText = Number(totalAmount.textContent) + Number(couponDiscountAmount.textContent)
                                }
                                couponDiscountAmount.innerText = Number(couponDiscountAmount.textContent) + data.couponDiscount;
                                discountAmount.innerText = Number(discountAmount.textContent) + data.couponDiscount
                                totalAmount.innerText = Number(totalAmount.textContent) - data.couponDiscount

                                const newCouponListItem = `
                                    <li class="flex-sb" id="coupon_${data.couponID}">
                                        <p style="font-family: monospace;">${couponCode} : ₹${data.couponDiscount}</p>
                                        <button type="button" onclick="removeCoupon('${data.couponID}',${data.couponDiscount})"><i class="fa-solid fa-trash"></i></button>
                                    </li>
                                `;
                                
                                if(!document.getElementById(`coupon_${data.couponID}`))

                                    couponList.insertAdjacentHTML('beforeend', newCouponListItem);

                            }

                            else if (data.error) {
                                Swal.fire({
                                    title: "Error",
                                    text: data.error,
                                    icon: "error",
                                });
                            }

                            else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                }

                function removeCoupon(couponID,couponDiscount){
                    
                    document.getElementById(`coupon_${couponID}`).remove()
                    const totalAmount = document.getElementById('totalAmount');
                    const couponDiscountAmount = document.getElementById('couponDiscountAmount');
                    const discountAmount = document.getElementById('discountAmount');

                    totalAmount.innerText=parseInt(totalAmount.textContent) + parseInt(couponDiscount);
                    couponDiscountAmount.innerText=couponDiscountAmount.textContent - couponDiscount;
                    discountAmount.innerText=discountAmount.textContent - couponDiscount;
                }

                function ValidateAddress(addressTitle, state, city, pinCode, streetAddress) {
                    return  checkValidText(addressTitle, 'Address Title', 3, 20, true, true, false) ||
                        checkValidText(state, 'State', 3, 25, true, false, false) ||
                        checkValidText(city, 'City', 3, 25, true, false, false) ||
                        checkPincode(pinCode) ||
                        checkValidText(streetAddress, 'Street Address', 10, 100, true, true, true)
                }




            </script>



</body>

</html>