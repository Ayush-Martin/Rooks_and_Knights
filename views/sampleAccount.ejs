<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/head.ejs') %>
    <link rel="stylesheet" href="/public/css/account.css">
</head>

<body class="">

    <!-- Header -->
    <header class="header-v4">
        <%- include('./partials/header.ejs') %>
    </header>

    <div class="custon">
        <div class="account-container">
            <!-- Sidebar Menu -->
            <div class="sidebar-menu">
              <a href="#" id="profile-link" onclick="showSection('profile', this)" class="active"><i class="fa fa-user"></i> Profile</a>
              <a href="#" id="address-link" onclick="showSection('address', this)"><i class="fa fa-home"></i> Address</a>
              <a href="#" id="orders-link" onclick="showSection('rrff', this)"><i class="fa fa-list"></i> Orders</a>
              <a href="#" id="returns-link" onclick="showSection('returns', this)"><i class="fa fa-undo"></i> Returns</a>
            </div>
            
            <!-- Content Area -->
            <div class="main-content">
              <!-- Profile Section -->
              <div class="section profile-section" id="profile-section">
                <div class="profile-card text-center">
                  <div class="">
                    <div>
                      <!-- <i class="fa fa-user-circle profile-icon">
                      </i> -->
                      <img class="profile-image" src="https://imgs.search.brave.com/xUnhBuWbmIAZWnv_S0MkPb7WWIWKCgojH_6Xxm3khBo/rs:fit:500:0:0:0/g:ce/aHR0cHM6Ly9wdWIt/c3RhdGljLmZvdG9y/LmNvbS9hc3NldHMv/cHJvamVjdHMvcGFn/ZXMvZGE3MDc1ZWM1/M2MwNDhhODhhMzcx/YzQzYjM3NmVmMWUv/Zm90b3ItNzZhMjdh/YmU1NDM2NDA1Yzhm/NzMwZjM2OWMwZTE4/YzYuanBn" alt="">
                    </div>
                    <button class="btn "><i class="fa fa-pencil-alt"></i></button>
                    <button class="btn"><i class="fa fa-trash-alt"></i></button>
                  </div>
                  <br>
                  <form action="">
                    <div class="form-group">
                      <label for="name">Name</label>
                      <input type="text" class="form-control" id="name" value="Ayush">
                    </div>
                  <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" value="john.doe@example.com" readonly>
                  </div>
                  <div class="form-group">
                    <label for="phone">Phone</label>
                    <input type="text" class="form-control" id="phone" value="+1234567890">
                  </div>
                  <button class="btn btn-save">Save Changes</button>
                  </form>
                  
                </div>
              </div>
        
              <!-- Address Section -->
              <div class="section hidden address-card-container" id="address-section">
                <h2>Address Book</h2>
        
                <!-- Address Cards -->
                <div class="address-card">
                  <div class="address-info">
                    <strong>John Doe</strong><br>
                    123 Main St, Apt 4B<br>
                    New York, NY 10001<br>
                    +1 234-567-890
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-edit"></i></a>
                    <a href="#"><i class="fa fa-trash"></i></a>
                  </div>
                </div>
        
                <div class="address-card">
                  <div class="address-info">
                    <strong>Jane Smith</strong><br>
                    456 Elm St, Suite 5A<br>
                    San Francisco, CA 94102<br>
                    +1 987-654-3210
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-edit"></i></a>
                    <a href="#"><i class="fa fa-trash"></i></a>
                  </div>
                </div>
        
                <div class="address-card">
                  <div class="address-info">
                    <strong>Emily Johnson</strong><br>
                    789 Oak St, Unit 2<br>
                    Chicago, IL 60614<br>
                    +1 555-555-5555
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-edit"></i></a>
                    <a href="#"><i class="fa fa-trash"></i></a>
                  </div>
                </div>
        
                <!-- Add New Address Button -->
                <button class="btn-add-address">Add New Address</button>
              </div>
        
              <!-- Orders Section -->
              <div id="orders-section" class="orders-card section hidden">
                <h3>My Orders</h3>
                <!-- When there are no orders -->
                <div class="address-card">
                  <div class="address-info">
                    <strong>John Doe</strong><br>
                    123 Main St, Apt 4B<br>
                    New York, NY 10001<br>
                    +1 234-567-890
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-eye"></i></a>
                  </div>
                </div>
        
                <div class="address-card">
                  <div class="address-info">
                    <strong>Jane Smith</strong><br>
                    456 Elm St, Suite 5A<br>
                    San Francisco, CA 94102<br>
                    +1 987-654-3210
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-edit"></i></a>
                  </div>
                </div>
        
                <div class="address-card">
                  <div class="address-info">
                    <strong>Emily Johnson</strong><br>
                    789 Oak St, Unit 2<br>
                    Chicago, IL 60614<br>
                    +1 555-555-5555
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-edit"></i></a>
                  </div>
                </div>
              </div>
        
        
              <!-- Returns Section -->
              <div id="returns-section" class="returns-card section hidden">
                <h3>My Returns</h3>
                <!-- When there are no orders -->
                <div class="address-card">
                  <div class="address-info">
                    <strong>John Doe</strong><br>
                    123 Main St, Apt 4B<br>
                    New York, NY 10001<br>
                    +1 234-567-890
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-eye"></i></a>
                  </div>
                </div>
        
                <div class="address-card">
                  <div class="address-info">
                    <strong>Jane Smith</strong><br>
                    456 Elm St, Suite 5A<br>
                    San Francisco, CA 94102<br>
                    +1 987-654-3210
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-edit"></i></a>
                  </div>
                </div>
        
                <div class="address-card">
                  <div class="address-info">
                    <strong>Emily Johnson</strong><br>
                    789 Oak St, Unit 2<br>
                    Chicago, IL 60614<br>
                    +1 555-555-5555
                  </div>
                  <div class="address-actions">
                    <a href="#"><i class="fa fa-edit"></i></a>
                  </div>
                </div>
              </div>
              </div>
        
              <!-- Orders Section -->
              
              
        
              
          </div>



        </div>


         <!-- modal to add new address -->
         <div class="modal fade m-t-50" id="addAddressModel" tabindex="-2" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">New Address</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="addressTitle" class="col-form-label">Address Title</label>
                                <input type="text" class="form-control" id="addressTitle">
                            </div>
                            <div class="form-group">
                                <label for="state" class="col-form-label">State</label>
                                <input type="text" class="form-control" id="state">
                            </div>
                            <div class="form-group">
                                <label for="city" class="col-form-label">City</label>
                                <input type="text" class="form-control" id="city">
                            </div>
                            <div class="form-group">
                                <label for="pinCode" class="col-form-label">Pin Code</label>
                                <input type="text" class="form-control" id="pinCode">
                            </div>
                            <div class="form-group">
                                <label for="streetAddress" class="col-form-label">Street Addrress</label>
                                <textarea class="form-control" id="streetAddress"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="addNewAddress(event)">Add</button>
                    </div>
                </div>
            </div>
        </div>
    
    
    
        <!-- modal to edit address -->
        <div class="modal fade m-t-50" id="editAddressModel" tabindex="-2" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Edit Address</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="addressTitle" class="col-form-label">Address Title</label>
                                <input type="text" class="form-control" id="addressTitleEdit">
                            </div>
                            <div class="form-group">
                                <label for="state" class="col-form-label">State</label>
                                <input type="text" class="form-control" id="stateEdit">
                            </div>
                            <div class="form-group">
                                <label for="city" class="col-form-label">City</label>
                                <input type="text" class="form-control" id="cityEdit">
                            </div>
                            <div class="form-group">
                                <label for="pinCode" class="col-form-label">Pin Code</label>
                                <input type="text" class="form-control" id="pinCodeEdit">
                            </div>
                            <div class="form-group">
                                <label for="streetAddress" class="col-form-label">Street Addrress</label>
                                <textarea class="form-control" id="streetAddressEdit"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer" id="editAddressDiv">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    <!-- Footer -->
    <footer class="bg3 p-t-75 p-b-32">
        <%- include('./partials/footer.ejs') %>
    </footer>


    <%- include('./partials/backToTop.ejs') %>


        <%- include('./partials/scriptBody.ejs') %>

            <script>
                function logout() {
                    Swal.fire({
                        title: "Are you sure?",
                        text: "You won't be able to revert this!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes,Logout!"
                    }).then((result) => {
                        if (result.isConfirmed) {

                            fetch('/user/logout', {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                            }).then((res) => res.json())
                                .then((data) => {
                                    if (data.success) {
                                        Swal.fire({
                                            title: "Loged Out",
                                            icon: "success",
                                            timer: 2000
                                        });
                                        setTimeout(() => {
                                            window.location.href = data.successRedirect;
                                        }, 2000)
                                    }
                                })

                        }
                    });
                }


                function updateProfile(event) {
                    event.preventDefault()
                    let username = document.getElementById('username').value;
                    let phoneNumber = document.getElementById('phoneNumber').value;
                    fetch('/user/account/updateProfile', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ username, phoneNumber })
                    })
                        .then(res => res.json())
                        .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Updated",
                                    text: "Your cart has been updated",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.error) {
                                Swal.fire({
                                    title: "Not updated",
                                    text: data.error,
                                    icon: "error",
                                    timer: 2000
                                })
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                        .catch(err => console.log(err))
                }

                function changePassword() {
                    Swal.fire({
                        title: "Are you sure?",
                        text: "You must verify OTP to change password",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes"
                    }).then((result) => {
                        if (result.isConfirmed) {

                            fetch('/user/account/changePassword', {
                                method: "POST",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                            }).then((res) => res.json())
                            .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Updated",
                                    text: "Your cart has been updated",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.href=data.redirectUrl;
                                }, 2000)
                            } else if (data.error) {
                                Swal.fire({
                                    title: "Not updated",
                                    text: data.error,
                                    icon: "error",
                                    timer: 2000
                                })
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                        .catch(err => console.log(err))

                        }
                    });
                }

                function addNewAddress(event) {
                    event.preventDefault()

                    let addressTitle = document.getElementById('addressTitle').value;
                    let state = document.getElementById('state').value;
                    let city = document.getElementById('city').value;
                    let pinCode = document.getElementById('pinCode').value;
                    let streetAddress = document.getElementById('streetAddress').value;

                    fetch('/address/add', {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ addressTitle, state, city, pinCode, streetAddress })
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Added",
                                    text: "New address has been added",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.error) {
                                Swal.fire({
                                    title: "Not added",
                                    text: data.error,
                                    icon: "error",
                                    timer: 2000
                                })
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                        .catch(err => console.log(err))
                }

                function editAddress(event, _id) {
                    event.preventDefault()

                    let addressTitle = document.getElementById('addressTitleEdit').value;
                    let state = document.getElementById('stateEdit').value;
                    let city = document.getElementById('cityEdit').value;
                    let pinCode = document.getElementById('pinCodeEdit').value;
                    let streetAddress = document.getElementById('streetAddressEdit').value;
                    console.log(addressTitle, state, city);

                    fetch(`/address/edit/${_id}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ addressTitle, state, city, pinCode, streetAddress })
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Edited",
                                    text: "Address has been edited",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.error) {
                                Swal.fire({
                                    title: "Not Edited",
                                    text: data.error,
                                    icon: "error",
                                    timer: 2000
                                })
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                        .catch(err => console.log(err))
                }

                function removeAddress(event, ID) {
                    console.log("dfdfdf");

                    event.preventDefault()
                    Swal.fire({
                        title: "Are you sure?",
                        text: "You want to remove this address",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes"
                    }).then((result) => {
                        if (result.isConfirmed) {

                            fetch(`/address/delete/${ID}`, {
                                method: "DELETE",
                                headers: {
                                    'Content-Type': 'application/json',
                                }
                            })
                                .then((res) => res.json())
                                .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Removed",
                                    text: "Address has been removed",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.error) {
                                Swal.fire({
                                    title: "Cannot remove",
                                    text: data.error,
                                    icon: "error",
                                    timer: 2000
                                })
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                        .catch(err => console.log(err))
                        }
                    });
                }



                function editAddressModel(e, _id) {

                    const addressdata = e.target.closest('button');
                    console.log(addressdata);
                    
                    const { addressTitle, state, city, pinCode, streetAddress } = JSON.parse(addressdata.getAttribute('data-address-item'));
                    document.getElementById('addressTitleEdit').value = addressTitle;
                    document.getElementById('stateEdit').value = state;
                    document.getElementById('cityEdit').value = city;
                    document.getElementById('pinCodeEdit').value = pinCode;
                    document.getElementById('streetAddressEdit').value = streetAddress;

                    // Get the parent div where the button should be appended
                    const editAddressDiv = document.getElementById('editAddressDiv');

                    // Check if the edit button already exists
                    if (!document.getElementById('editAddressButton')) {
                        var editButton = document.createElement('button');
                        editButton.textContent = "Edit";
                        editButton.id = 'editAddressButton';
                        editButton.onclick = () => editAddress(event, _id);
                        editButton.classList.add('btn', 'btn-primary');

                        editAddressDiv.appendChild(editButton);
                    }
                }

                function collapse(ID) {
                    console.log('fdf');

                    const target = document.getElementById(`orderDetailsCollaple_${ID}`);
                    console.log(target);

                    if (target.classList.contains('show')) {
                        target.classList.remove('show');
                    } else {
                        target.classList.add('show');
                    }
                }
                document.querySelectorAll('[data-toggle="collapse"]').forEach(button => {
                    button.addEventListener('click', function () {

                    });
                });

                function cancelOrder(orderProductsID,productID,productQuantity) {
                    

                    Swal.fire({
                        title: "Are you sure?",
                        text: "You want to cancel this order",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/order/cancel/${orderProductsID}`, {
                                method: "PATCH",
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({productID,productQuantity})
                            })
                                .then(res => res.json())
                                .then((data) => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Canceled",
                                    text: "Your order has been canceled",
                                    icon: "success",
                                    timer: 2000
                                });
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.error) {
                                Swal.fire({
                                    title: "Cannot cancel",
                                    text: data.error,
                                    icon: "error",
                                    timer: 2000
                                })
                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000)
                            } else if (data.authError) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: data.authError,
                                    footer: data.errorRedirect
                                });
                            }
                        })
                        .catch(err => console.log(err))
                        }
                    })
                }

            </script>

            <script>
    // JavaScript function to show different sections
    function showSection(sectionId, element) {
      // Hide all sections
      document.querySelectorAll('.section').forEach(function(section) {
        section.classList.add('hidden');
      });

      // Remove active class from all sidebar links
      document.querySelectorAll('.sidebar-menu a').forEach(function(link) {
        link.classList.remove('active');
      });

      // Show the selected section
      document.getElementById(sectionId + '-section').classList.remove('hidden');

      // Add active class to the clicked link
      element.classList.add('active');
    }

  </script>
</body>

</html>